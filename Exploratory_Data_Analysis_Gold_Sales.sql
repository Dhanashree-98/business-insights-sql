
-- Explore All Objects in The Database

SELECT * FROM INFORMATION_SCHEMA.TABLES
go



-- Explore All Columns in The Database

SELECT * FROM INFORMATION_SCHEMA.COLUMNS
where TABLE_NAME = 'dim_customers'
go


-- Explore All Countries our Customers Come From

SELECT DISTINCT country from gold.dim_customers
go


-- Explore All Categories "The Major Divisions"

SELECT DISTINCT category, subcategory, product_name from gold.dim_products
ORDER BY 1,2,3
go


-- Find the Date of the First and Last Order

SELECT MIN(order_date) first_order_date, 
MAX(order_date) last_order_date,
DATEDIFF(MONTH,MIN(order_date),MAX(order_date)) AS order_range_months
from gold.fact_sales
go



-- Find the Youngest and the Oldest Customers

SELECT MIN(birthdate) AS youngest_customer, 
DATEDIFF(YEAR,MIN(birthdate),GETDATE()) AS oldest_age,
MAX(birthdate) AS oldest_customer,
DATEDIFF(YEAR,MAX(birthdate),GETDATE()) AS youngest_age
FROM gold.dim_customers
go




-- Find the Total Sales

SELECT SUM(sales_amount) AS total_sales FROM gold.fact_sales
GO

-- Find how many items are sold

SELECT SUM(quantity) AS total_quantity FROM gold.fact_sales
GO

-- Find the average selling price

SELECT AVG(price) AS average_selling_price FROM gold.fact_sales
GO

-- Find the total number of Orders

SELECT COUNT(DISTINCT order_number) AS total_orders FROM gold.fact_sales
GO

-- Find the total number of Products

SELECT COUNT(DISTINCT product_key) AS total_products FROM gold.fact_sales
GO

-- Find the total number of Customers

SELECT COUNT(customer_key) AS total_customers FROM gold.dim_customers
GO

-- Find the total number of Customers that have palced an order

SELECT COUNT(DISTINCT customer_key) AS total_customers_with_orders FROM gold.fact_sales
GO


-- Generate a Report that shows all the key metrics for the business

SELECT 'Total Sales' AS measure_name, SUM(sales_amount) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Quantity' AS measure_name, SUM(quantity) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Average Selling Price' AS measure_name, AVG(price) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Orders' AS measure_name, COUNT(DISTINCT order_number) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Products' AS measure_name, COUNT(DISTINCT product_key) AS measure_value FROM gold.fact_sales
UNION ALL
SELECT 'Total Customers' AS measure_name, COUNT(customer_key) AS measure_value FROM gold.dim_customers
UNION ALL
SELECT 'Total Customers With Orders' AS measure_name, COUNT(DISTINCT customer_key) AS measure_value FROM gold.fact_sales
GO



-- Find total customers by countries

SELECT 
country,
COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY country
ORDER BY total_customers DESC
GO

-- Find total customers by gender

SELECT 
gender,
COUNT(customer_key) AS total_customers
FROM gold.dim_customers
GROUP BY gender
ORDER BY total_customers DESC
GO

-- Find total products by category

SELECT 
category,
COUNT(product_key) AS total_products
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC
GO

-- What is the average cost in each category?

SELECT 
category,
AVG(cost) AS avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY avg_cost DESC
GO

-- What is the total revenue generated for each category?

SELECT
p.category,
SUM(f.sales_amount) total_revenue
FROM gold.fact_sales f
LEFT JOIN
gold.dim_products p
ON f.product_key = p.product_key
GROUP BY p.category
ORDER BY total_revenue DESC
GO

-- Find total revenue generated by each customer

SELECT
c.customer_key,
c.first_name,
c.last_name,
SUM(f.sales_amount) total_revenue
FROM gold.fact_sales f
LEFT JOIN
gold.dim_customers c
ON f.customer_key = c.customer_key
GROUP BY 
c.customer_key,
c.first_name,
c.last_name
ORDER BY total_revenue DESC
GO

-- What is the distribution of sold items across countries?

SELECT
c.country,
SUM(f.quantity) AS total_sold_items
FROM gold.fact_sales f
LEFT JOIN
gold.dim_customers c
ON c.customer_key = f.customer_key
GROUP BY c.country
ORDER BY total_sold_items DESC
GO




-- Which 5 products generate the highest revenue?

SELECT
TOP 5
p.product_name,
SUM(f.sales_amount) total_revenue
FROM gold.fact_sales f
LEFT JOIN
gold.dim_products p
ON f.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue DESC
GO


-- What are the worst-performing products in terms of sales?

SELECT
TOP 5
p.product_name,
SUM(f.sales_amount) total_revenue
FROM gold.fact_sales f
LEFT JOIN
gold.dim_products p
ON f.product_key = p.product_key
GROUP BY p.product_name
ORDER BY total_revenue
GO


SELECT * 
FROM (
	SELECT
	p.product_name,
	SUM(f.sales_amount) total_revenue,
	ROW_NUMBER() OVER (ORDER  BY SUM(f.sales_amount) DESC) AS rank_products
	FROM gold.fact_sales f
	LEFT JOIN
	gold.dim_products p
	ON f.product_key = p.product_key
	GROUP BY p.product_name)t
WHERE rank_products <= 5
GO


-- Find the Top 10 customers who have generated the highest revenue 

SELECT *
FROM (
	SELECT
	c.customer_key,
	c.first_name,
	c.last_name,
	SUM(f.sales_amount) total_revenue,
	ROW_NUMBER() OVER (ORDER  BY SUM(f.sales_amount) DESC) AS customer_rank
	FROM gold.fact_sales f
	LEFT JOIN
	gold.dim_customers c
	ON f.customer_key = c.customer_key
	GROUP BY 
	c.customer_key,
	c.first_name,
	c.last_name)t
WHERE customer_rank <= 10
GO



-- Find 3 customers with the fewest orders placed

SELECT *
FROM (
	SELECT
	c.customer_key,
	c.first_name,
	c.last_name,
	COUNT(DISTINCT f.order_number) total_orders,
	ROW_NUMBER() OVER (ORDER  BY COUNT(f.order_number)) AS customer_rank
	FROM gold.fact_sales f
	LEFT JOIN
	gold.dim_customers c
	ON f.customer_key = c.customer_key
	GROUP BY 
	c.customer_key,
	c.first_name,
	c.last_name)t
WHERE customer_rank <= 3
GO